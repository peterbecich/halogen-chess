-- File auto generated by purescript-bridge! --
module Game.Chess.Internal where

import Data.Argonaut.Aeson.Decode.Generic (genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (genericEncodeAeson)
import Data.Argonaut.Aeson.Options as Argonaut
import Data.Argonaut.Decode.Class (class DecodeJson, decodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (defaultOptions, genericDecode, genericEncode)
import Type.Proxy (Proxy(Proxy))

import Prelude

data Color =
    Black
  | White

instance encodeColor :: Encode Color where
  encode = genericEncode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance decodeColor :: Decode Color where
  decode = genericDecode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance encodeJsonColor :: EncodeJson Color where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonColor :: DecodeJson Color where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericColor :: Generic Color _

--------------------------------------------------------------------------------
_Black :: Prism' Color Unit
_Black = prism' (\_ -> Black) f
  where
    f Black = Just unit
    f _ = Nothing

_White :: Prism' Color Unit
_White = prism' (\_ -> White) f
  where
    f White = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
data PieceType =
    Pawn
  | Knight
  | Bishop
  | Rook
  | Queen
  | King

instance encodePieceType :: Encode PieceType where
  encode = genericEncode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance decodePieceType :: Decode PieceType where
  decode = genericDecode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance encodeJsonPieceType :: EncodeJson PieceType where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonPieceType :: DecodeJson PieceType where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericPieceType :: Generic PieceType _

--------------------------------------------------------------------------------
_Pawn :: Prism' PieceType Unit
_Pawn = prism' (\_ -> Pawn) f
  where
    f Pawn = Just unit
    f _ = Nothing

_Knight :: Prism' PieceType Unit
_Knight = prism' (\_ -> Knight) f
  where
    f Knight = Just unit
    f _ = Nothing

_Bishop :: Prism' PieceType Unit
_Bishop = prism' (\_ -> Bishop) f
  where
    f Bishop = Just unit
    f _ = Nothing

_Rook :: Prism' PieceType Unit
_Rook = prism' (\_ -> Rook) f
  where
    f Rook = Just unit
    f _ = Nothing

_Queen :: Prism' PieceType Unit
_Queen = prism' (\_ -> Queen) f
  where
    f Queen = Just unit
    f _ = Nothing

_King :: Prism' PieceType Unit
_King = prism' (\_ -> King) f
  where
    f King = Just unit
    f _ = Nothing

--------------------------------------------------------------------------------
