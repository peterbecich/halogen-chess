-- File auto generated by purescript-bridge! --
module Game.Chess.Internal.Square where

import Data.Argonaut.Aeson.Decode.Generic (genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (genericEncodeAeson)
import Data.Argonaut.Aeson.Options as Argonaut
import Data.Argonaut.Decode.Class (class DecodeJson, decodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Foreign.Class (class Decode, class Encode)
import Foreign.Generic (defaultOptions, genericDecode, genericEncode)
import Prim (Int)

import Prelude

newtype Square =
    Sq Int

instance encodeSquare :: Encode Square where
  encode = genericEncode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance decodeSquare :: Decode Square where
  decode = genericDecode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance encodeJsonSquare :: EncodeJson Square where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonSquare :: DecodeJson Square where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericSquare :: Generic Square _
derive instance newtypeSquare :: Newtype Square _

--------------------------------------------------------------------------------
_Sq :: Iso' Square Int
_Sq = _Newtype
--------------------------------------------------------------------------------
newtype Rank =
    Rank Int

instance encodeRank :: Encode Rank where
  encode = genericEncode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance decodeRank :: Decode Rank where
  decode = genericDecode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance encodeJsonRank :: EncodeJson Rank where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonRank :: DecodeJson Rank where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericRank :: Generic Rank _
derive instance newtypeRank :: Newtype Rank _

--------------------------------------------------------------------------------
_Rank :: Iso' Rank Int
_Rank = _Newtype
--------------------------------------------------------------------------------
newtype File =
    File Int

instance encodeFile :: Encode File where
  encode = genericEncode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance decodeFile :: Decode File where
  decode = genericDecode $ defaultOptions { unwrapSingleConstructors = false , unwrapSingleArguments = false }
instance encodeJsonFile :: EncodeJson File where
  encodeJson = genericEncodeAeson Argonaut.defaultOptions
instance decodeJsonFile :: DecodeJson File where
  decodeJson = genericDecodeAeson Argonaut.defaultOptions
derive instance genericFile :: Generic File _
derive instance newtypeFile :: Newtype File _

--------------------------------------------------------------------------------
_File :: Iso' File Int
_File = _Newtype
--------------------------------------------------------------------------------
